apply plugin: 'java'
apply plugin: 'java-library-distribution'
apply plugin: 'maven'

version = System.getProperty("MAVEN_UPLOAD_VERSION") // https://github.com/couchbase/couchbase-lite-java/issues/11

repositories {
    mavenLocal()
    maven { url "http://thaliartifactory.cloudapp.net/artifactory/libs-snapshot" }
    maven { url "http://thaliartifactory.cloudapp.net/artifactory/libs-release" }
    maven { url 'http://files.couchbase.com/maven2/' }
    mavenCentral()
}

def buildAgainstMavenArtifacts = System.getProperty("buildAgainstMavenArtifacts")

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.11'

    // Dependencies for testing with couchbase-lite-android test suits
    testCompile group: 'commons-io', name: 'commons-io', version: '2.0.1'
    testCompile 'com.couchbase.lite:java-listener:1.0.0-beta3rc1' // https://github.com/couchbase/couchbase-lite-android/issues/287
    compile group: 'org.json', name: 'json', version: '20090211'

    // Dependencies required by couchbase-lite-java-core
    compile group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.0-beta1'
    compile group: 'org.apache.httpcomponents', name: 'httpcore', version: '4.0-beta2'
    compile group: 'commons-logging', name: 'commons-logging', version: '1.1.3'

    compile buildAgainstMavenArtifacts == null ?
            project(':libraries:couchbase-lite-java-core') :
            'com.couchbase.lite:java-core:' + version

	compile buildAgainstMavenArtifacts == null ?
            project(':libraries:couchbase-lite-java-native') :
            'com.couchbase.lite:java-native:' + version            
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.java.srcDirs
}

artifacts {
    archives sourcesJar
}

task createMavenDirectory(type: Exec) {
    ext {
        uploadUser = System.getenv("MAVEN_UPLOAD_USERNAME") + ":" + System.getenv("MAVEN_UPLOAD_PASSWORD")
        mkcolPath = System.getenv("MAVEN_UPLOAD_REPO_URL") + "com/couchbase/lite/java/" + version + "/"
    }
    commandLine "curl", "--user", uploadUser, "-X", "MKCOL", mkcolPath
}

// this hack is only needed for apache mod_dav based Maven repo's like file.couchbase.com.  otherwise, skip it
createMavenDirectory.onlyIf { System.getenv("MAVEN_UPLOAD_REPO_URL").contains("files") }

// first create the directory, then do the upload
task uploadArchivesWrapper(dependsOn: createMavenDirectory) << {
    uploadArchives.execute()
}

def mavenPath() {  // https://github.com/couchbase/couchbase-lite-java/issues/12
    artifactory_local == "true" ?
            'file://' + new File(System.getProperty('user.home'), '.m2/repository').absolutePath :
            artifactory_contextUrl + "/libs-release-local"
}

// this will upload, but will not first create a directory (which is needed on some servers)
uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: mavenPath()) {  // https://github.com/couchbase/couchbase-lite-java/issues/12
                authentication(userName: "${artifactory_user}", password: "${artifactory_password}")  // https://github.com/couchbase/couchbase-lite-java/issues/11
            //repository(url: System.getenv("MAVEN_UPLOAD_REPO_URL")) {
            //    authentication(userName: System.getenv("MAVEN_UPLOAD_USERNAME"), password: System.getenv("MAVEN_UPLOAD_PASSWORD"))
            }

            pom.version = version
            pom.groupId = 'com.couchbase.lite'
            pom.artifactId = 'java'
            pom.project {
                licenses {
                    license {
                        name 'Couchbase Community Edition License Agreement'
                        url 'http://www.couchbase.com/agreement/community'
                        distribution 'repo'
                    }
                }
            }
        }
    }
}

task copyAndroidTests(type: Copy) {
    from "../couchbase-lite-android/src/androidTest/java/com/couchbase/lite"
    into 'src/test/java/com/couchbase/lite'
}

task deleteBrokenTests(type: Delete) {
    delete 'src/test/java/com/couchbase/lite/CollationTest.java', 'src/test/java/com/couchbase/lite/Base64Test.java'
}

task copyAndroidAssets(type: Copy) {
    from "../couchbase-lite-android/src/androidTest/assets"
    into 'src/test/resources/assets'
}

test.dependsOn(copyAndroidTests, deleteBrokenTests, copyAndroidAssets)